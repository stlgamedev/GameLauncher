name: Build and Release Windows Installer

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and release (e.g., v1.0.0) [leave blank for dev build only]'
        required: false

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.tag || github.ref_name || 'main' }}

      # Install Haxe
      - name: Install Haxe
        uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.3.3

      # Install dependencies
      - name: Install haxelibs
        run: |
          haxelib install hxcpp
          haxelib install openfl
          haxelib install flixel
          haxelib install openfl-aseprite
          haxelib install hxcodec

      # Sync version from Project.xml to STLGameLauncher.iss
      - name: Sync version to .iss
        run: python scripts/update_iss_version.py Project.xml STLGameLauncher.iss

      # Build Windows executable
      - name: Build Windows Executable
        run: haxelib run lime build windows -release -final

      # Install Inno Setup
      - name: Install Inno Setup
        run: choco install innosetup

      # Build installer
      - name: Build Installer
        run: ISCC.exe STLGameLauncher.iss

      # Find the installer exe
      - name: Find installer
        id: find_installer
        run: |
          $file = Get-ChildItem -Path Builds -Filter *.exe | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          echo "INSTALLER_PATH=$($file.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Upload as artifact if not a release build
      - name: Upload Installer Artifact
        if: ${{ !github.event.inputs.tag && !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: STLGameLauncher-Setup
          path: ${{ env.INSTALLER_PATH }}

      # Upload to GitHub Releases (only if running on a tag)
      - name: Upload Release Asset
        if: ${{ github.event.inputs.tag || startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.INSTALLER_PATH }}
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Write SFTP batch commands for cleanup
      - name: Write SFTP batch commands
        if: ${{ github.event.inputs.tag || startsWith(github.ref, 'refs/tags/') }}
        shell: pwsh
        run: |
          Set-Content -Path putty-sftp-cmds.txt -Value "cd /home/public/`nrm STLGameLauncher-Setup-*.exe`nbye" -NoNewline

      # Write SSH private key to file
      - name: Write SSH key
        if: ${{ github.event.inputs.tag || startsWith(github.ref, 'refs/tags/') }}
        shell: pwsh
        env:
          SFTP_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          Set-Content -Path keyfile -Value $env:SFTP_KEY -NoNewline

      # Download and extract PuTTY tools
      - name: Download PuTTY tools
        if: ${{ github.event.inputs.tag || startsWith(github.ref, 'refs/tags/') }}
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://the.earth.li/~sgtatham/putty/latest/w64/putty.zip" -OutFile "putty.zip"
          Expand-Archive -Path "putty.zip" -DestinationPath "putty-tools"

      # Dynamically fetch and cache SFTP host key for PuTTY
      - name: Cache SFTP host key (dynamic)
        if: ${{ github.event.inputs.tag || startsWith(github.ref, 'refs/tags/') }}
        shell: bash
        env:
          SFTP_HOST: ${{ secrets.SFTP_HOST }}
        run: |
          set -e
          # Ensure plink.exe is available in the working directory
          if [ -f putty-tools/plink.exe ]; then
            cp putty-tools/plink.exe .
          elif [ -f plink.exe ]; then
            echo "plink.exe already present"
          else
            echo "plink.exe not found, downloading..."
            curl -L -o plink.exe https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe
          fi

          # Fetch all host keys using ssh-keyscan (Git Bash is available on Windows runners)
          ssh-keyscan "$SFTP_HOST" > hostkey.txt 2>/dev/null

          # Check if hostkey.txt is not empty
          if [ ! -s hostkey.txt ]; then
            echo "ERROR: ssh-keyscan failed to fetch host key for $SFTP_HOST"
            exit 1
          fi

          # Find the key type actually used by the server (prefer ed25519, then ecdsa, then rsa)
          KEYLINE=$(head -n 1 hostkey.txt)
          if echo "$KEYLINE" | grep -q 'ssh-ed25519'; then
            KEYTYPE="ed25519"
          elif echo "$KEYLINE" | grep -q 'ecdsa'; then
            KEYTYPE="ecdsa"
          elif echo "$KEYLINE" | grep -q 'ssh-rsa'; then
            KEYTYPE="rsa"
          else
            echo "ERROR: Unknown key type in hostkey.txt: $KEYLINE"
            cat hostkey.txt
            exit 1
          fi

          # Extract the fingerprint for the detected key type
          FINGERPRINT=$(ssh-keygen -l -f hostkey.txt | grep -i "$KEYTYPE" | awk '{print $2}')
          if [ -z "$FINGERPRINT" ]; then
            echo "ERROR: Could not extract fingerprint for $KEYTYPE from hostkey.txt"
            cat hostkey.txt
            exit 1
          fi

          # Add the host key to PuTTY's cache using plink.exe
          ./plink.exe -ssh -hostkey "$FINGERPRINT" "$SFTP_HOST" exit || true

          # Clean up
          rm -f hostkey.txt

      # Clean old installers and upload new one via PuTTY tools
      - name: SFTP Clean and Upload (PuTTY)
        if: ${{ github.event.inputs.tag || startsWith(github.ref, 'refs/tags/') }}
        shell: cmd
        env:
          SFTP_USER: ${{ secrets.SFTP_USER }}
          SFTP_HOST: ${{ secrets.SFTP_HOST }}
          INSTALLER_PATH: ${{ env.INSTALLER_PATH }}
        run: |
          putty-tools\psftp.exe -i keyfile -batch -b putty-sftp-cmds.txt %SFTP_USER%@%SFTP_HOST% || exit 1
          putty-tools\pscp.exe -i keyfile -batch -sftp "%INSTALLER_PATH%" %SFTP_USER%@%SFTP_HOST%:/home/public/ || exit 1
          del keyfile
          del putty-sftp-cmds.txt
