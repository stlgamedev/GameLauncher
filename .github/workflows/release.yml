name: Build and Release Windows Installer

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and release (e.g., v1.0.0) [leave blank for dev build only]'
        required: false

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.tag || github.ref_name || 'main' }}

      # Install Haxe
      - name: Install Haxe
        uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.3.3

      # Install dependencies
      - name: Install haxelibs
        run: |
          haxelib install hxcpp
          haxelib install openfl
          haxelib install flixel
          haxelib install openfl-aseprite
          haxelib install hxcodec

      # Sync version from Project.xml to STLGameLauncher.iss
      - name: Sync version to .iss
        run: python scripts/update_iss_version.py Project.xml STLGameLauncher.iss

      # Build Windows executable
      - name: Build Windows Executable
        run: haxelib run lime build windows -release -final

      # Install Inno Setup
      - name: Install Inno Setup
        run: choco install innosetup

      # Build installer
      - name: Build Installer
        run: ISCC.exe STLGameLauncher.iss

      # Find the installer exe
      - name: Find installer
        id: find_installer
        run: |
          $file = Get-ChildItem -Path Builds -Filter *.exe | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          echo "INSTALLER_PATH=$($file.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Upload as artifact if not a release build
      - name: Upload Installer Artifact
        if: ${{ !github.event.inputs.tag && !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: STLGameLauncher-Setup
          path: ${{ env.INSTALLER_PATH }}

      # Upload to GitHub Releases (only if running on a tag)
      - name: Upload Release Asset
        if: ${{ github.event.inputs.tag || startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.INSTALLER_PATH }}
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install Posh-SSH PowerShell module
      - name: Install Posh-SSH
        if: ${{ github.event.inputs.tag || startsWith(github.ref, 'refs/tags/') }}
        shell: pwsh
        run: Install-Module -Name Posh-SSH -Force -Scope CurrentUser

      # Delete old installers and upload new one via SFTP
      - name: SFTP Clean and Upload
        if: ${{ github.event.inputs.tag || startsWith(github.ref, 'refs/tags/') }}
        shell: pwsh
        env:
          SFTP_USER: ${{ secrets.SFTP_USER }}
          SFTP_HOST: ${{ secrets.SFTP_HOST }}
          SFTP_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          INSTALLER_PATH: ${{ env.INSTALLER_PATH }}
        run: |
          if (-not (Test-Path $env:INSTALLER_PATH)) {
            Write-Error "Installer not found: $env:INSTALLER_PATH"
            exit 1
          }
          $key = [System.IO.Path]::GetTempFileName()
          $secureKey = $env:SFTP_KEY | ConvertTo-SecureString -AsPlainText -Force
          Set-Content -Path $key -Value $secureKey -Force -ErrorAction Stop
          Install-Module -Name Posh-SSH -Force -Scope CurrentUser -ErrorAction Stop
          $session = New-SFTPSession -ComputerName $env:SFTP_HOST -Username $env:SFTP_USER -KeyFile $key -AcceptKey -ErrorAction Stop
          # Remove all old installers
          Get-SFTPChildItem -SessionId $session.SessionId -Path '/home/public/' | Where-Object { $_.Name -like 'STLGameLauncher-Setup-*.exe' } | ForEach-Object { Remove-SFTPItem -SessionId $session.SessionId -Path $_.FullName -ErrorAction Stop }
          # Upload the new installer
          Set-SFTPFile -SessionId $session.SessionId -LocalFile $env:INSTALLER_PATH -RemotePath '/home/public/' -ErrorAction Stop
          Remove-SFTPSession -SessionId $session.SessionId -ErrorAction Stop
          Remove-Item $key -Force -ErrorAction Stop
